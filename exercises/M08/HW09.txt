     1	import pandas as pd
     2	
     3	class BookLover():
     4	    def __init__(
     5	        self, name, email, fav_genre,
     6	        num_books = 0,
     7	        book_list = pd.DataFrame({'book_name':[], 'book_rating':[]})):
     8	
     9	        self.name = name
    10	        self.email = email
    11	        self.fav_genre = fav_genre
    12	        if num_books != book_list.shape[0]:
    13	            self.num_books = book_list.shape[0]
    14	        else:
    15	            self.num_books = num_books
    16	        if book_list.shape[0] == book_list.drop_duplicates(['book_name']).shape[0]:
    17	            self.book_list = book_list
    18	        else:
    19	            raise ValueError("book_list must contain unique books")
    20	
    21	    def add_book(self, book_name, book_rating):
    22	        
    23	        if self.has_read(book_name) == False:
    24	            new_book = pd.DataFrame({
    25	                'book_name': [book_name], 
    26	                'book_rating': [book_rating]
    27	            })
    28	
    29	            self.book_list = pd.concat([self.book_list, new_book], ignore_index=True)
    30	            self.num_books += 1
    31	
    32	
    33	    def has_read(self, book_name):
    34	        if book_name in self.book_list['book_name'].values:
    35	            print(f"{self.name}, This Book, '{book_name}' Already Exists in Your Book List")
    36	            return True
    37	        else: 
    38	            return False
    39	    
    40	    def num_books_read(self):
    41	        return self.num_books
    42	    
    43	    def fav_books(self):
    44	        return self.book_list.loc[self.book_list['book_rating']>3,:]import unittest
    45	import numpy as np
    46	import pandas as pd
    47	from booklover import BookLover
    48	import booklover as bl
    49	
    50	class BookLoverTestSuite(unittest.TestCase):
    51	   
    52	   def test_1_add_book(self):
    53	      book = BookLover("Name","Email","NA")
    54	      book.add_book("Travels with Charley",5)
    55	      self.assertTrue("Travels with Charley" in book.book_list['book_name'].values)
    56	
    57	   def test_2_add_book(self):
    58	      book = BookLover("Dude","Email","NA")
    59	      book.add_book("Travels with Charley",5)
    60	      book.add_book("Travels with Charley",5)
    61	      self.assertEqual(book.book_list[book.book_list['book_name'] == "Travels with Charley"].shape[0],1)
    62	    
    63	   def test_3_has_read(self):
    64	      book = BookLover(
    65	         "Dude","Email","NA",1,
    66	         pd.DataFrame({'book_name':["Travels with Charley"], 'book_rating':[5]}))
    67	      
    68	      self.assertTrue(book.has_read("Travels with Charley"))
    69	
    70	   def test_4_has_read(self):
    71	      book = BookLover(
    72	         "Dude","Email","NA",1,
    73	         pd.DataFrame({'book_name':["Travels with Charley"], 'book_rating':[5]}))
    74	      
    75	      self.assertFalse(book.has_read("Travels without Charley"))
    76	
    77	   def test_5_num_books_read(self):
    78	      book = BookLover("Dude","Email","NA")
    79	      book.add_book("Traveled with Charley",5)
    80	      book.add_book("Travels with Charley",5)
    81	      book.add_book("Travels with Charley",5) #DUP
    82	      book.add_book("Traveling with Charley",5)
    83	      book.add_book("Travel with Charley",5)
    84	      book.add_book("Will Travel with Charley",5)
    85	      self.assertEqual(book.num_books,5)
    86	
    87	
    88	   def test_6_fav_books(self):
    89	      book = BookLover("Dude","Email","NA")
    90	      book.add_book("Traveled with Charley",1)
    91	      book.add_book("Travels with Charley",4)
    92	      book.add_book("Travels with Charley",5) #DUP
    93	      book.add_book("Traveling with Charley",3)
    94	      book.add_book("Travel with Charley",2)
    95	      book.add_book("Will Travel with Charley",5)
    96	      self.assertTrue(all(book.fav_books()['book_rating'].values > 3))
    97	   
    98	if __name__ == '__main__':
    99	    unittest.main(verbosity=3)test_1_add_book (__main__.BookLoverTestSuite.test_1_add_book) ... ok
   100	test_2_add_book (__main__.BookLoverTestSuite.test_2_add_book) ... ok
   101	test_3_has_read (__main__.BookLoverTestSuite.test_3_has_read) ... ok
   102	test_4_has_read (__main__.BookLoverTestSuite.test_4_has_read) ... ok
   103	test_5_num_books_read (__main__.BookLoverTestSuite.test_5_num_books_read) ... ok
   104	test_6_fav_books (__main__.BookLoverTestSuite.test_6_fav_books) ... ok
   105	
   106	----------------------------------------------------------------------
   107	Ran 6 tests in 0.010s
   108	
   109	OK

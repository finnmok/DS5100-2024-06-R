calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
vapply(seq(0,1,0.1),get.earnings)
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
getearnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- cumsum(earnings$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),getearnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- cumsum(earnings$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- cumsum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
vapply(seq(0,1,0.1),get.earnings)
# CODE HERE
lapply(seq(0,1,0.1),get.earnings)
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
return(base.earning)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- cumsum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- cumsum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earning <- sum(base.earnings.df$quota.dollars)
if (length(base.earning) > 0){
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
highest.df.quota <- 0
}
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (length(base.earnings.df) > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * 225000 * head(df,1)$quota)
}
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (length(base.earnings.df) > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * 225000 * head(df,1)$quota)
}
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
base.earnings.df
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earnings.df
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
length(base.earnings.df) > 0
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
sum(base.earnings.df$quota.dollars)
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
max(base.earnings.df$cum.brackets)
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
length(base.earnings.df) > 0
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
length(base.earnings.df)
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
length(base.earnings.df)
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earnings.df
fraction.met <- 0
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)
dim(base.earnings.df)[0]
dim(base.earnings.df)[1]
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (dim(base.earnings.df)[1] > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * 225000 * head(df,1)$quota)
}
calc.earnings <- head(df[df$cum.brackets > fraction.met,],1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
fraction.met <- 0.1
fraction.met <- 0.1
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)[1]
fraction.met <- 0.2
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)[1]
fraction.met <- 0.3
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)[1]
fraction.met <- 0.4
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)[1]
fraction.met <- 0.4
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
dim(base.earnings.df)
fraction.met <- 0.4
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earnings.df
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (dim(base.earnings.df)[1] > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * 225000 * head(df,1)$quota)
}
extra.earnings.df <- df[df$cum.brackets > fraction.met,]
if (dim(extra.earnings.df)[1] > 0){
calc.earnings <- head(extra.earnings.df,1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * 225000 * calc.earnings$quota)
} else {
return(base.earning)
}
}
fraction.met <- 0.4
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
base.earnings.df
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
df <- data.frame(brackets = c(0.4,0.3,0.2,0.1),
quota = c(0.07,0.1,0.13,0.16))
df$base <- 225000
df$quota.dollars <- df$quota * df$brackets * df$base
df$cum.brackets <- cumsum(df$brackets)
df
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (dim(base.earnings.df)[1] > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * head(df,1)$base * head(df,1)$quota)
}
extra.earnings.df <- df[df$cum.brackets > fraction.met,]
if (dim(extra.earnings.df)[1] > 0){
calc.earnings <- head(extra.earnings.df,1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * calc.earnings$base * calc.earnings$quota)
} else {
return(base.earning)
}
}
# CODE HERE
sapply(seq(0,1,0.1),get.earnings)
# CODE HERE
earnings.comparison <- data.frame(earned = seq(0,1,0.1))
earnings.comparison$quota.earnings <- sapply(
earnings.comparison$earned,get.earnings)
earnings.comparison
# CODE HERE
earnings.comparison <- data.frame(earned = seq(0,1.1,0.1))
earnings.comparison$quota.earnings <- sapply(
earnings.comparison$earned,get.earnings)
earnings.comparison
# CODE HERE
earnings.comparison <- data.frame(earned = seq(0,1,0.1))
earnings.comparison$quota.earnings <- sapply(
earnings.comparison$earned,get.earnings)
earnings.comparison
# CODE HERE
get.earnings <- function(fraction.met) {
base.earnings.df <- df[df$cum.brackets <= fraction.met,]
if (dim(base.earnings.df)[1] > 0){
base.earning <- sum(base.earnings.df$quota.dollars)
highest.df.quota <- max(base.earnings.df$cum.brackets)
} else {
return(fraction.met * head(df,1)$base * head(df,1)$quota)
}
extra.earnings.df <- df[df$cum.brackets > fraction.met,]
if (dim(extra.earnings.df)[1] > 0){
calc.earnings <- head(extra.earnings.df,1)
diff.earnings <- fraction.met - highest.df.quota
return(base.earning + diff.earnings * calc.earnings$base * calc.earnings$quota)
} else {
return(base.earning)
}
}
# CODE HERE
get.earnings(1)
# CODE HERE
earnings.comparison <- data.frame(earned = seq(0,1,0.1))
earnings.comparison$quota.earnings <- sapply(
earnings.comparison$earned,get.earnings)
earnings.comparison
# CODE HERE
df <- data.frame(brackets = c(0.4,0.3,0.2,0.1),
quota = c(0.07,0.1,0.13,0.16))
df$base <- 225000
df$quota.dollars <- df$quota * df$brackets * df$base
df$cum.brackets <- cumsum(df$brackets)
df$earnings <- df$base * df$cum.brackets
df$cum.quota.dollars <- cumsum(df$quota.dollars)
df
# CODE HERE
plot(x=df$cum.brackets,y=df$cum.quota.dollars)
# CODE HERE
plot(x=df$earnings,y=df$cum.quota.dollars)
plot(x=df$earnings,y=df$cum.quota.dollars,type='l')
# CODE HERE
plot(x=earnings.comparison$earned,y=earnings.comparison$quota.earnings)
plot(x=earnings.comparison$earned,y=earnings.comparison$quota.earnings,type='l')
# CODE HERE
plot(x=earnings.comparison$earned,y=earnings.comparison$quota.earnings)
# CODE HERE
plot(x=earnings.comparison$earned*225000,y=earnings.comparison$quota.earnings)
# CODE HERE
plot(
x=df$earnings,
y=df$cum.quota.dollars,
main="Get My Quota Earnings",
xlab="Amount Raised ($)",
ylab="Quota Earnings ($)")
plot(
x=df$earnings,
y=df$cum.quota.dollars,
type='l',
main="Get My Quota Earnings",
xlab="Amount Raised ($)",
ylab="Quota Earnings ($)")
# CODE HERE
plot(
x=earnings.comparison$earned*225000,
y=earnings.comparison$quota.earnings,
main="Get My Quota Earnings",
xlab="Amount Raised ($)",
ylab="Quota Earnings ($)")
plot(
x=earnings.comparison$earned*225000,
y=earnings.comparison$quota.earnings,
type='l',
main="Get My Quota Earnings",
xlab="Amount Raised ($)",
ylab="Quota Earnings ($)")
tinytex::reinstall_tinytex(repository = "illinois")
is_even <- function(x) {
if (x %% 2 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
is_even(2)
is_even(4)
is_even(0)
is_even(1)
q <- 5
new_fcn <- function(x) {
x ^ q
}
print(new_fcn(2))
elementwise_multiply <- function(w, v) {
if (length(w) != length(v)) {
stop("w and v must be the same length", call. = FALSE)
}
w * v
}
v1 <- c(1,2)
v2 <- c(3,3,3)
elementwise_multiply(v1, v2)
threshold <- function(p, thresh = 0.5) {
p > thresh
}
print(threshold(0.45,0.4))
c(1,2,5,6) - 1
typeof(c(3.4,3))
c(1,2,5,6) - 1
typeof(c(3.4,3))
vec <- c(TRUE, TRUE, TRUE, FALSE, TRUE)
sum(vec)
z <- c(1,2,5,6,NA,8)
y <- length(z[!is.na(z)])
print(y)
s <- seq(0, 1, by=0.1)
smax <- max(s)
smin <- min(s)
s_len <- length(s)
if (s_len < 5){
print(smin)
} else {
print(smax)
}
git pull
# CODE HERE
read.table('abalone.data.txt')
# CODE HERE
read.table('abalone.data.txt',sep=',')
# CODE HERE
df <- read.table('abalone.data.txt',sep=',')
head(df)
# CODE HERE
dim(df)
# CODE HERE
dim(df)[1]
# CODE HERE
df
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',')
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',')
head(df)
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',',header = 0)
head(df)
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',',header = 1)
head(df)
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',',header = 0)
# CODE HERE
df <- read.csv('abalone.data.txt',sep=',',header = 0)
head(df)
# CODE HERE
print( dim(df)[1] )
# CODE HERE
dim(df)[1]
# CODE HERE
max(df$V9)
# CODE HERE
library(tidyr)
library(dplyr)
df %>%
```
# CODE HERE
library(tidyr)
library(dplyr)
df %>% filter(V1 == "I")
df %>% filter(V1 == "I") %>% dim()
df %>% filter(V1 == "I") %>% dim()[1]
# CODE HERE
library(tidyr)
library(dplyr)
df %>% filter(V1 == "I") %>% dim()[1]
df %>% filter(V1 == "I") %>% dim()
df %>% filter(V1 == "I") %>% nrow()
# CODE HERE
nrow(df)
# CODE HERE
library(tidyr)
library(dplyr)
df %>% filter(V1 == "I") %>% nrow()
# CODE HERE
df %>% filter(V1 %in% c("M","I"))
# CODE HERE
df %>% filter(V1 %in% c("M","I")) %>% nrow()
# CODE HERE
df %>% filter(V1 %in% c("M")) %>% nrow()
# CODE HERE
df %>% filter(V1 %in% c("M","I")) %>% nrow()
# CODE HERE
table(df)
# CODE HERE
table(df$V1)
# CODE HERE
print( table(df$V1) )
# CODE HERE
table(df$V1)
# CODE HERE
df %>% group_by(V1) %>% mean()
# CODE HERE
df %>% group_by(V1)
df %>% group_by(V1) %>% summarize(mean())
# CODE HERE
df %>% group_by(V1) %>% summarize(mean(V2))
# CODE HERE
df %>% group_by(V1) %>% summarize(mn.shell = mean(V2))
# CODE HERE
df %>% select(V1=="M")
# CODE HERE
df %>% select(V1=="M")
# CODE HERE
df %>% select(v1=="M")
# CODE HERE
df %>% select(V1=="M")
# CODE HERE
df
# CODE HERE
df$V1 == "M"
# CODE HERE
df %>% filter(V1 == "M")
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2)
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2) %>% median()
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2) %>% median()
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2)
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2) %>% summarize(median())
# CODE HERE
df %>% filter(V1 == "M") %>% select(V2) %>% summarize(median(V2))
# CODE HERE
df %>% filter(V1 == "M") %>% summarize(median(V2))
# CODE HERE
df %>% group_by(V1) %>% summarize(mean(V2))
# CODE HERE
df %>% filter(V1 == "M") %>% summarize(median(V2))
vals <- seq(-pi, pi, 0.1)
sin(vals)
z <- c(TRUE, FALSE, FALSE, NA)
class(z)
# CODE HERE
```
